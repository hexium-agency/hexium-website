---
import Button from '@/components/button.astro';
import FileUpload from '@/components/form/file-upload.astro';
import Input from '@/components/form/input.astro';
import Label from '@/components/form/label.astro';
import SelectOption from '@/components/form/select-option.astro';
import Select from '@/components/form/select.astro';
import Textarea from '@/components/form/textarea.astro';
import Checkbox from '@/components/form/checkbox.astro';
import BaseLayout from '@/layouts/base-layout.astro';
import Alert from '@/components/alert.astro';
---

<BaseLayout metaTitle="Contact">
  <div class="flex flex-col lg:flex-row">
    <div class="flex items-center justify-center p-8 lg:w-1/2 lg:p-16">
      <div class="max-w-xl">
        <h1 class="mb-6 text-4xl font-bold">Contactez-nous</h1>
        <p class="mb-8 text-xl text-gray-600">
          Nous sommes là pour répondre à vos questions et vous accompagner dans vos projets.
          N'hésitez pas à nous contacter pour toute demande.
        </p>
      </div>
    </div>

    <div class="bg-gray-100 lg:w-1/2">
      <div class="mx-auto max-w-2xl p-8 lg:p-16">
        <form id="contactForm" class="space-y-4" action="/api/contact" method="POST" enctype="multipart/form-data">
          <div id="formAlertContainer" class="hidden mb-4">
          </div>
          
          <div>
            <Select id="subject" name="subject" required label="Sujet">
              <SelectOption value="project">Projet</SelectOption>
              <SelectOption value="job">Emploi</SelectOption>
              <SelectOption value="collaboration">Collaboration</SelectOption>
              <SelectOption value="other">Autre</SelectOption>
            </Select>
          </div>

          <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
            <div>
              <Label for="firstname">Prénom</Label>
              <Input id="firstname" name="firstname" required />
            </div>
            <div>
              <Label for="lastname">Nom</Label>
              <Input id="lastname" name="lastname" required />
            </div>
          </div>

          <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
            <div>
              <Label for="email">Email</Label>
              <Input type="email" id="email" name="email" required />
            </div>
            <div>
              <Label for="phone" optional>Téléphone</Label>
              <Input type="tel" id="phone" name="phone" />
            </div>
          </div>

          <div id="companyField">
            <Label for="company" optional>Entreprise</Label>
            <Input id="company" name="company" />
          </div>

          <div>
            <Label for="message">Message</Label>
            <Textarea id="message" name="message" required />
          </div>

          <div>
            <Label for="files" optional>Documents</Label>
            <FileUpload id="files" name="files" />
          </div>

          <Checkbox
            id="privacy"
            name="privacy"
            required
            label="J'accepte de recevoir un accord de confidentialité"
          />

          <div class="flex items-center justify-between">
            <Button id="submitButton" isLink={false}>Envoyer</Button>
           
            <div id="formSpinner" class="hidden">
              <svg class="animate-spin h-5 w-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

  <template id="successAlertTemplate">
    <Alert 
      type="success"
      title="Succès"
      message="Votre message a été envoyé avec succès."
    />
  </template>

  <template id="dangerAlertTemplate">
    <Alert 
      type="danger"
      title="Erreur"
      message="Une erreur est survenue lors de l'envoi du message."
    />
  </template>

  <script>
    const subjectSelect = document.getElementById('subject') as HTMLSelectElement | null;
    const companyField = document.getElementById('companyField') as HTMLDivElement | null;
    const contactForm = document.getElementById('contactForm') as HTMLFormElement | null;
    const formAlertContainer = document.getElementById('formAlertContainer') as HTMLDivElement | null;
    const submitButton = document.getElementById('submitButton') as HTMLButtonElement | null;
    const formSpinner = document.getElementById('formSpinner') as HTMLDivElement | null;
    const successAlertTemplate = document.getElementById('successAlertTemplate') as HTMLTemplateElement | null;
    const dangerAlertTemplate = document.getElementById('dangerAlertTemplate') as HTMLTemplateElement | null;
    const fileInput = document.getElementById('files') as HTMLInputElement | null;
    const fileList = document.getElementById('fileList') as HTMLDivElement | null;

    function toggleCompanyField() {
      if (!subjectSelect || !companyField) return;

      if (['project', 'collaboration', 'other'].includes(subjectSelect.value)) {
        companyField.style.display = 'block';
      } else {
        companyField.style.display = 'none';
      }
    }

    if (subjectSelect) {
      subjectSelect.addEventListener('change', toggleCompanyField);
      toggleCompanyField();
    }

    function showAlert(type: 'success' | 'danger') {
      if (!formAlertContainer) return;
      
      formAlertContainer.innerHTML = '';
      
      const template = type === 'success' ? successAlertTemplate : dangerAlertTemplate;
      if (!template) return;
      
      const alertElement = template.content.cloneNode(true) as DocumentFragment;
      
      formAlertContainer.appendChild(alertElement);
      formAlertContainer.classList.remove('hidden');
    }
    
    // Function to reset the select component visually
    function resetSelectComponent() {
      if (!subjectSelect) return;
      
      // Reset the select to first option
      subjectSelect.selectedIndex = 0;
      
      // Update the visual display of the select
      const selectValueSpan = document.querySelector('[data-select-value]') as HTMLSpanElement | null;
      if (selectValueSpan && subjectSelect.options.length > 0) {
        selectValueSpan.textContent = subjectSelect.options[0].textContent;
      }
      
      // Trigger the change event to update any dependent fields (like companyField)
      subjectSelect.dispatchEvent(new Event('change'));
    }
    
    // Function to reset the file upload component visually
    function resetFileUploadComponent() {
      if (!fileList) return;
      
      // Clear the file list display
      fileList.innerHTML = '';
      
      // Reset the DataTransfer object if needed
      if (fileInput) {
        const emptyDataTransfer = new DataTransfer();
        fileInput.files = emptyDataTransfer.files;
      }
    }
    
    if (contactForm) {
      contactForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (!formAlertContainer || !submitButton || !formSpinner) return;
        
        submitButton.disabled = true;
        formSpinner.classList.remove('hidden');
        formAlertContainer.classList.add('hidden');
        
        try {
          const formData = new FormData(contactForm);
          
          const response = await fetch('/api/contact', {
            method: 'POST',
            body: formData,
          });
          
          const data = await response.json();
          
          if (data.success) {
            showAlert('success');
            contactForm.reset();
            // Reset select and file upload components visually
            resetSelectComponent();
            resetFileUploadComponent();
          } else {
            showAlert('danger');
          }
        } catch (error) {
          showAlert('danger');
        } finally {
          submitButton.disabled = false;
          formSpinner.classList.add('hidden');
        
          formAlertContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });
    }
  </script>
</BaseLayout>
