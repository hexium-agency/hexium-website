---
import type { NavbarDropdownStoryblok } from '@/types/storyblok';
import { storyblokEditable } from '@storyblok/astro';
import StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro';

interface AstroProps {
  blok: NavbarDropdownStoryblok;
}

const { blok } = Astro.props as AstroProps;

const shouldFlexHorizontally = blok.items.every((item) => item.component === 'navbarColumn');

const subDropdownItems = blok.items.filter((item) => item.component === 'navbarSubDropdown');
---

<div {...storyblokEditable(blok)} class="group/dropdown lg:relative">
  <h2 class="dropdown-title text-sm font-medium px-3 py-1.5">{blok.title}</h2>

  <div
    class="dropdown-container invisible absolute top-0 left-0 z-50 flex h-screen w-full flex-col gap-4 bg-white opacity-0 transition-all duration-200 lg:top-full lg:mt-2 lg:h-auto lg:w-auto lg:flex-row lg:rounded-md lg:shadow-lg lg:group-hover/dropdown:opacity-100 lg:group-hover/dropdown:visible"
  >
    <div
      class={`lg:p-4 flex flex-col gap-4 ${shouldFlexHorizontally ? 'lg:flex-row' : 'lg:flex-col'}`}
    >
      <div class="back-button flex items-center gap-2 border border-gray-200 p-4 lg:hidden">
        {/* TODO: Add left arrow */}
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        Back
      </div>
      {blok.items.map((link) => <StoryblokComponent blok={link} />)}
    </div>

    {
      subDropdownItems.map((item) => (
        <div class="hidden lg:hidden gap-6 p-4" data-subdropdown={item.title}>
          {item.items.map((link) => (
            <StoryblokComponent blok={link} />
          ))}
        </div>
      ))
    }
  </div>
</div>

<script>
  const dropdownItems = document.querySelectorAll('.dropdown-title');
  const dropdownContainers = document.querySelectorAll('.dropdown-container');
  const backButtons = document.querySelectorAll('.back-button');

  const visibleClasses = ['opacity-100', 'visible'];
  const invisibleClasses = ['opacity-0', 'invisible'];

  // Function to close all dropdowns
  const closeAllDropdowns = () => {
    dropdownContainers.forEach((container) => {
      container.classList.remove(...visibleClasses);
      container.classList.add(...invisibleClasses);
    });
  };

  backButtons.forEach((button) => {
    button.addEventListener('click', () => {
      closeAllDropdowns();
    });
  });

  dropdownItems.forEach((item) => {
    const container = item.nextElementSibling as HTMLElement;

    item.addEventListener('click', (e) => {
      e.stopPropagation();

      // Toggle current dropdown
      if (!container) {
        return;
      }

      closeAllDropdowns();

      const isHidden = container.classList.contains('opacity-0');

      if (isHidden) {
        container.classList.add(...visibleClasses);
        container.classList.remove(...invisibleClasses);

        return;
      }

      container.classList.remove(...visibleClasses);
      container.classList.add(...invisibleClasses);
    });
  });

  // Close dropdowns when clicking outside
  document.addEventListener('click', (e) => {
    if (
      !(e.target as Element).closest('.dropdown-container') &&
      !(e.target as Element).closest('.dropdown-title')
    ) {
      closeAllDropdowns();
    }
  });
</script>
