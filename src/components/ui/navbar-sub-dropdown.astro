---
import type { NavbarSubDropdownStoryblok } from '@/types/storyblok';
import { storyblokEditable } from '@storyblok/astro';
import StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro';

interface AstroProps {
  blok: NavbarSubDropdownStoryblok;
}

const { blok } = Astro.props as AstroProps;
---

<div
  {...storyblokEditable(blok)}
  class="navbar-sub-dropdown mx-3 rounded-lg bg-transparent lg:mx-0 lg:p-0 lg:hover:bg-white"
>
  <div
    class="navbar-sub-dropdown-title flex min-w-[150px] items-center justify-between rounded-lg px-3 py-1.5 text-sm font-medium"
  >
    <span class="transition-all duration-300 ease-in-out lg:transition-none">{blok.title}</span>
    <svg
      data-slot="icon"
      fill="none"
      stroke-width="1.5"
      stroke="currentColor"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      aria-hidden="true"
      class="navbar-sub-dropdown-chevron pointer-events-none size-5 transition-all duration-300 ease-in-out lg:hidden"
    >
      <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5"></path>
    </svg>

    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width={1.5}
      stroke="currentColor"
      class="pointer-events-none ml-4 hidden size-4 lg:block"
    >
      <path stroke-linecap="round" stroke-line-join="round" d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
    </svg>
  </div>

  <div
    class="navbar-sub-dropdown-items hidden flex-col overflow-hidden transition-all duration-300 ease-in-out lg:hidden"
    data-subdropdown-mobile={blok.title}
  >
    {blok.items.map((item) => <StoryblokComponent blok={item} class="hidden" />)}
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    // Show the first dropdown by default when the DOM is loaded
    const firstDropdown = document.querySelector('[data-subdropdown]');
    const firstDropdownMobile = document.querySelector<HTMLElement>('[data-subdropdown-mobile]');
    const firstChevron = document.querySelector('.navbar-sub-dropdown-chevron');
    const firstTitleSpan = document.querySelector('.navbar-sub-dropdown-title span');

    if (firstDropdown) {
      firstDropdown.classList.remove('lg:hidden');
      firstDropdown.classList.add('lg:flex');
    }

    if (firstDropdownMobile) {
      firstDropdownMobile.classList.remove('hidden');
      firstDropdownMobile.classList.add('flex');
    }

    if (firstChevron) {
      firstChevron.classList.add('rotate-180');
    }

    const firstTitle = document.querySelector('.navbar-sub-dropdown-title');
    if (firstTitle) {
      firstTitle.classList.add('bg-white');
    }

    document.querySelectorAll('.navbar-sub-dropdown-title').forEach((title) => {
      const titleText = title?.querySelector('span')?.textContent || '';

      title.addEventListener('click', () => {
        // First, hide all dropdown items and reset chevrons
        document.querySelectorAll(`[data-subdropdown]`).forEach((items) => {
          items.classList.add('lg:hidden');
          items.classList.remove('lg:flex');
        });

        document.querySelectorAll<HTMLElement>('[data-subdropdown-mobile]').forEach((items) => {
          items.classList.add('hidden');
          items.classList.remove('flex');
          items.style.height = '0';
        });

        // Reset all chevrons and titles
        document.querySelectorAll('.navbar-sub-dropdown-chevron').forEach((chevron) => {
          chevron.classList.remove(
            'rotate-180',
            'text-blue-600',
            'transition-all',
            'duration-300',
            'ease-in-out'
          );
        });

        // Then show only the clicked dropdown's items and update its chevron
        const dropdownItems = document.querySelector(`[data-subdropdown="${titleText}"]`);
        const dropdownItemsMobile = document.querySelector<HTMLElement>(
          `[data-subdropdown-mobile="${titleText}"]`
        );
        const chevron = title.querySelector('.navbar-sub-dropdown-chevron');

        if (dropdownItems) {
          dropdownItems.classList.remove('lg:hidden');
          dropdownItems.classList.add('lg:flex');
        }

        if (dropdownItemsMobile) {
          dropdownItemsMobile.classList.remove('hidden');
          dropdownItemsMobile.classList.add('flex');
          // Trigger height animation
          requestAnimationFrame(() => {
            dropdownItemsMobile.style.height = dropdownItemsMobile.scrollHeight + 'px';
          });
        }

        if (chevron) {
          chevron.classList.add('transition-all', 'duration-300', 'ease-in-out');
          chevron.classList.toggle('rotate-180');
        }

        // Add bg-white to the clicked title
        document.querySelectorAll('.navbar-sub-dropdown-title').forEach((t) => {
          t.classList.remove('bg-white');
        });
        title.classList.add('bg-white');
      });
    });
  });
</script>
